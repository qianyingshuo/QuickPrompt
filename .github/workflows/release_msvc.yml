name: compile QuickPrompt
run-name: windows compiling
on:
  push:
    branches:
      - release
    paths-ignore:
      - 'Readme.md'
  pull_request:
    branches:
      - release
    paths-ignore:
      - 'Readme.md'

jobs:
  build:
    runs-on: windows-latest
    strategy:
      matrix:
        include:
          - qt_ver: 5.14.2
            qt_arch: win32_msvc2017
            msvc_arch: x86
            qt_arch_install: msvc2017
          - qt_ver: 5.14.2           
            qt_arch: win64_msvc2017_64
            msvc_arch: x64
            qt_arch_install: msvc2017_64
    env:
      targetName: QuickPrompt.exe

    steps:
      - name: Install Qt
        uses: jurplel/install-qt-action@v3
        with:
          version: ${{ matrix.qt_ver }}
          target: 'desktop'
          arch: ${{ matrix.qt_arch }}
          install-deps: 'true'
          archives: 'qtwidget qtbase qtprintsupport'
          cache: 'false'
          cache-key-prefix: 'install-qt-action'
          setup-python: 'true'
          tools: 'tools_windeployqt'
          set-env: 'true'
          tools-only: 'false'
          aqtversion: '==2.0.5'
          py7zrversion: '==0.20.*'
          extra: '--external 7z'

      - name: Check Out
        uses: actions/checkout@v4

      - name: build-msvc
        shell: cmd
        run: |
          call "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Auxiliary\Build\vcvarsall.bat" ${{ matrix.msvc_arch }}
          qmake QuickPrompt.pro -spec win32-msvc "CONFIG+=qtquickcompiler"
          nmake
          echo winSdkDir=%WindowsSdkDir% >> %GITHUB_ENV%
          echo winSdkVer=%WindowsSdkVersion% >> %GITHUB_ENV%
          echo vcToolsInstallDir=%VCToolsInstallDir% >> %GITHUB_ENV%
          echo vcToolsRedistDir=%VCToolsRedistDir% >> %GITHUB_ENV%
          dir release
          tree D:\a\QuickPrompt/Qt/
      - name: package
        id: package      
        env:
          archiveName: ${{ matrix.qt_ver }}-${{ matrix.qt_arch }}
          msvcArch: ${{ matrix.msvc_arch }}          
        shell: pwsh
        run: |
          & scripts\windows-publish.ps1 ${env:archiveName} ${env:targetName}
          # 记录packageName给后续step
          $name = ${env:archiveName}
          echo "::set-output name=packageName::$name"       
      # tag 查询github-Release
      # 上传artifacts          
      - uses: actions/upload-artifact@v2
        with:
          name: ${{ steps.package.outputs.packageName }}
          path: ${{ steps.package.outputs.packageName }}
      # tag 上传Release
      - name: uploadRelease
        if: startsWith(github.event.ref, 'refs/tags/')
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: ${{ steps.package.outputs.packageName }}.zip
          asset_name: ${{ steps.package.outputs.packageName }}.zip
          tag: ${{ github.ref }}
          overwrite: true 
